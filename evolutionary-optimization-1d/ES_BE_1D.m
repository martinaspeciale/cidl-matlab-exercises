function [x_opt, f_opt] = ES_BE_1D(f,a,b,niter,ngenes,mutprob,dispAndPlot)
% function [x_opt, f_opt] = ES_BE_1D(f,a,b,niter,ngenes,mutprob)
%
% This function Implements a (1+1) Evolution Strategy, assuming
% a binary encoding for the searched solution.
% The function works for continuous functions in 1D, over a box
% contrained interval (the (a,b) interval, to be precise).
%
%   % Example 1 - Rastrigin
%   close all
%   f = @(x) 10 + x.^2 - 10*cos(2*pi*x);
%   a = -5;
%   b = 5;
%   niter = 1000;
%   ngenes = 10;
%   mutprob = 0.2;           
%   disp('Known optimum: x = 0.0 ( y = 0.0 )');
%   [best_x, best_y] = ES_BE_1D(f,a,b,niter,ngenes,mutprob,true)
%
%
%   % Example 2 - Sinusoidal shaped function
%   close all
%   f = @(x) sin(x) + sin((10.0 / 3.0) * x)
%   a = -2.7;
%   b = 7.5;
%   disp('known optimum: x = 5.145735 ( y = -1.8996 )');
%   niter = 1000;
%   ngenes = 10;
%   mutprob = 0.2;
%   [x_opt, f_opt] = ES_BE_1D(f,a,b,niter,ngenes,mutprob,true)

if nargin < 7
    dispAndPlot = true;
end

% Generate randomly an initial individual, encoded as a vector of logicals
current_x = BE_initpop(ngenes,1);

% evaluating the fitness of current_x
current_fitness = BE_evaluatefitness(f,current_x,a,b); 

if dispAndPlot
    domain = linspace(a,b,1000);
    colmap = autumn(niter); % colormap, to be used during plots    
    subplot(1,2,1);
    plot(domain,feval(f,domain),'-b');
    title('function to minimise');
    subplot(1,2,2);
    plot(logical2real(current_x,a,b),current_fitness,'sk','markersize',8);
    set(gca,'nextplot','add');
    plot(domain,feval(f,domain),'-b');
    title('points generated by (1+1) Evolutionary Strategy');
end


for i = 1:niter

    % Generate a new solution by mutating the current solution
    new_x = BE_MUT_unifall(current_x,mutprob);

    % Evaluate the fitness of the new solution
    new_fitness = BE_evaluatefitness(f,new_x,a,b);

    % If the new solution is better than the current solution, replace the current solution
    if new_fitness < current_fitness
        current_x = new_x;
        current_fitness = new_fitness;
    end

    if dispAndPlot
        plot(logical2real(new_x,a,b),new_fitness,'o','Color',colmap(niter-i+1,:));
        fprintf('iteration %d, best_x = %+.4f, best_y = %+.4f (x = %+.4f, y= %+.4f)  \n', i, logical2real(current_x,a,b), current_fitness, logical2real(new_x,a,b), new_fitness);
    end
end
x_opt = logical2real(current_x,a,b);
f_opt = current_fitness;
