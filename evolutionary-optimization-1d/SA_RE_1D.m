function [best_x, best_y] = SA_RE_1D(f,a,b,niter,lambda,dispAndPlot)
% SA - Simulated Annealing for bounded minimisation in one dimension,
%      within the interval (a,b). The search variable is modelled
%      as a real variable (Real Encoding).
%
% 
% The function works with real variables (Real Encoding)
%
%   % Example 1 - Rastrigin
%   close all
%   f = @(x) 10 + x.^2 - 10*cos(2*pi*x);
%   a = -5;
%   b = 5;
%   niter = 1000;
%   lambda = 0.01;             
%   disp('Known optimum: x = 0.0 ( y = 0.0 )');
%   [best_x, best_y] = SA_RE_1D(f,a,b,niter,lambda,true)
%
%
%   % Example 2 - Sinusoidal shaped function
%   close all
%   f = @(x) sin(x) + sin((10.0 / 3.0) * x)
%   a = -2.7;
%   b = 7.5;
%   niter = 500;
%   lambda = 0.01;  
%   disp('Known optimum: x = 5.145735 ( y = -1.8996 )');
%   [best_x, best_y] = SA_RE_1D(f,a,b,niter,lambda,true)

if nargin < 6
    dispAndPlot = false;
end

time = 1:niter;
temperature = exp(-lambda*time);

x1 = rand()*(b-a)+a; % unifrnd(1,1,a,b)
y1 = feval(f,x1); % f(x)

current_x = x1; % current solution, to be perturbed
current_y = y1; % value of the objective function of the current solution

best_x = x1;
best_y = y1;

if dispAndPlot
    domain = linspace(a,b,1000);
    colmap = autumn(niter); % colormap, to be used during plots
    subplot(1,3,1);
    plot(time,temperature);
    title('temperature vs time (i.e., vs iterations)');
    set(gca,'xlim',[1,niter]);
    subplot(1,3,2);
    plot(domain,feval(f,domain),'-b');
    title('function to minimise');
    subplot(1,3,3);
    plot(x1,y1,'sk','markersize',8);
    set(gca,'nextplot','add');
    plot(domain,feval(f,domain),'-b');
    title('points generated by Simulated Annealing');
end



for i=2:niter    
    new_x = perturb(current_x,a,b);
    new_y = feval(f,new_x);        
    if (new_y < current_y) || ( rand() < temperature(i) )
        current_x = new_x;
        current_y = new_y;
    end
    if new_y < best_y
        best_x = new_x;
        best_y = new_y;
    end

    % optional display and plot
    if dispAndPlot
        plot(new_x,new_y,'o','Color',colmap(niter-i+1,:));
        fprintf('iteration %d, best_x = %.4f, best_y = %.4f (current_x = %.4f, current_y= %.4f)  \n', i, best_x, best_y, current_x, current_y);
    end

end % end of the for loop


end % end of the main function



% --- utility function(s) ------------------------------------
function new_x = perturb(current_x,a,b)

    new_x = current_x + 0.2*(b-a)*(rand()-0.5);
    if new_x > b
        new_x = b;
    end
    if new_x < a
        new_x = a;
    end    
end
